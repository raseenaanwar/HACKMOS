import { GeneratedType, Registry, OfflineSigner } from "@cosmjs/proto-signing";
import { AminoTypes, SigningStargateClient } from "@cosmjs/stargate";
import { HttpEndpoint } from "@cosmjs/tendermint-rpc";
export declare const emsAminoConverters: {
    "/ems.v1.MsgUpdateParams": {
        aminoType: string;
        toAmino: (message: import("./v1/tx").MsgUpdateParams) => import("./v1/tx").MsgUpdateParamsAmino;
        fromAmino: (object: import("./v1/tx").MsgUpdateParamsAmino) => import("./v1/tx").MsgUpdateParams;
    };
    "/ems.v1.MsgCreateEventParams": {
        aminoType: string;
        toAmino: (message: import("./v1/tx").MsgCreateEventParams) => import("./v1/tx").MsgCreateEventParamsAmino;
        fromAmino: (object: import("./v1/tx").MsgCreateEventParamsAmino) => import("./v1/tx").MsgCreateEventParams;
    };
    "/ems.v1.MsgIssueEventNFTParams": {
        aminoType: string;
        toAmino: (message: import("./v1/tx").MsgIssueEventNFTParams) => import("./v1/tx").MsgIssueEventNFTParamsAmino;
        fromAmino: (object: import("./v1/tx").MsgIssueEventNFTParamsAmino) => import("./v1/tx").MsgIssueEventNFTParams;
    };
    "/ems.v1.MsgAddEventOrganizerParams": {
        aminoType: string;
        toAmino: (message: import("./v1/tx").MsgAddEventOrganizerParams) => import("./v1/tx").MsgAddEventOrganizerParamsAmino;
        fromAmino: (object: import("./v1/tx").MsgAddEventOrganizerParamsAmino) => import("./v1/tx").MsgAddEventOrganizerParams;
    };
    "/ems.v1.MsgUpdateEventStatusParams": {
        aminoType: string;
        toAmino: (message: import("./v1/tx").MsgUpdateEventStatusParams) => import("./v1/tx").MsgUpdateEventStatusParamsAmino;
        fromAmino: (object: import("./v1/tx").MsgUpdateEventStatusParamsAmino) => import("./v1/tx").MsgUpdateEventStatusParams;
    };
};
export declare const emsProtoRegistry: ReadonlyArray<[string, GeneratedType]>;
export declare const getSigningEmsClientOptions: ({ defaultTypes }?: {
    defaultTypes?: ReadonlyArray<[string, GeneratedType]>;
}) => {
    registry: Registry;
    aminoTypes: AminoTypes;
};
export declare const getSigningEmsClient: ({ rpcEndpoint, signer, defaultTypes }: {
    rpcEndpoint: string | HttpEndpoint;
    signer: OfflineSigner;
    defaultTypes?: ReadonlyArray<[string, GeneratedType]>;
}) => Promise<SigningStargateClient>;
