import * as _94 from "./module/v1/module";
import * as _95 from "./v1/ems";
import * as _96 from "./v1/genesis";
import * as _97 from "./v1/query";
import * as _98 from "./v1/state";
import * as _99 from "./v1/tx";
import * as _198 from "./v1/query.lcd";
import * as _199 from "./v1/query.rpc.Query";
import * as _200 from "./v1/tx.rpc.msg";
export declare namespace ems {
    namespace module {
        const v1: {
            Module: {
                typeUrl: string;
                encode(_: _94.Module, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                decode(input: import("..").BinaryReader | Uint8Array, length?: number): _94.Module;
                fromPartial(_: Partial<_94.Module>): _94.Module;
                fromAmino(_: _94.ModuleAmino): _94.Module;
                toAmino(_: _94.Module): _94.ModuleAmino;
                fromAminoMsg(object: _94.ModuleAminoMsg): _94.Module;
                fromProtoMsg(message: _94.ModuleProtoMsg): _94.Module;
                toProto(message: _94.Module): Uint8Array;
                toProtoMsg(message: _94.Module): _94.ModuleProtoMsg;
            };
        };
    }
    const v1: {
        MsgClientImpl: typeof _200.MsgClientImpl;
        QueryClientImpl: typeof _199.QueryClientImpl;
        createRpcQueryExtension: (base: import("@cosmjs/stargate").QueryClient) => {
            params(request?: _97.QueryParamsRequest): Promise<_97.QueryParamsResponse>;
            getEvent(request: _97.QueryGetEventRequest): Promise<_97.QueryGetEventResponse>;
        };
        LCDQueryClient: typeof _198.LCDQueryClient;
        registry: ReadonlyArray<[string, import("@cosmjs/proto-signing").GeneratedType]>;
        load: (protoRegistry: import("@cosmjs/proto-signing").Registry) => void;
        MessageComposer: {
            encoded: {
                updateParams(value: _99.MsgUpdateParams): {
                    typeUrl: string;
                    value: Uint8Array;
                };
                msgCreateEvent(value: _99.MsgCreateEventParams): {
                    typeUrl: string;
                    value: Uint8Array;
                };
                msgIssueEventNFT(value: _99.MsgIssueEventNFTParams): {
                    typeUrl: string;
                    value: Uint8Array;
                };
                msgAddEventOrganizer(value: _99.MsgAddEventOrganizerParams): {
                    typeUrl: string;
                    value: Uint8Array;
                };
                msgUpdateEventStatus(value: _99.MsgUpdateEventStatusParams): {
                    typeUrl: string;
                    value: Uint8Array;
                };
            };
            withTypeUrl: {
                updateParams(value: _99.MsgUpdateParams): {
                    typeUrl: string;
                    value: _99.MsgUpdateParams;
                };
                msgCreateEvent(value: _99.MsgCreateEventParams): {
                    typeUrl: string;
                    value: _99.MsgCreateEventParams;
                };
                msgIssueEventNFT(value: _99.MsgIssueEventNFTParams): {
                    typeUrl: string;
                    value: _99.MsgIssueEventNFTParams;
                };
                msgAddEventOrganizer(value: _99.MsgAddEventOrganizerParams): {
                    typeUrl: string;
                    value: _99.MsgAddEventOrganizerParams;
                };
                msgUpdateEventStatus(value: _99.MsgUpdateEventStatusParams): {
                    typeUrl: string;
                    value: _99.MsgUpdateEventStatusParams;
                };
            };
            fromPartial: {
                updateParams(value: _99.MsgUpdateParams): {
                    typeUrl: string;
                    value: _99.MsgUpdateParams;
                };
                msgCreateEvent(value: _99.MsgCreateEventParams): {
                    typeUrl: string;
                    value: _99.MsgCreateEventParams;
                };
                msgIssueEventNFT(value: _99.MsgIssueEventNFTParams): {
                    typeUrl: string;
                    value: _99.MsgIssueEventNFTParams;
                };
                msgAddEventOrganizer(value: _99.MsgAddEventOrganizerParams): {
                    typeUrl: string;
                    value: _99.MsgAddEventOrganizerParams;
                };
                msgUpdateEventStatus(value: _99.MsgUpdateEventStatusParams): {
                    typeUrl: string;
                    value: _99.MsgUpdateEventStatusParams;
                };
            };
        };
        AminoConverter: {
            "/ems.v1.MsgUpdateParams": {
                aminoType: string;
                toAmino: (message: _99.MsgUpdateParams) => _99.MsgUpdateParamsAmino;
                fromAmino: (object: _99.MsgUpdateParamsAmino) => _99.MsgUpdateParams;
            };
            "/ems.v1.MsgCreateEventParams": {
                aminoType: string;
                toAmino: (message: _99.MsgCreateEventParams) => _99.MsgCreateEventParamsAmino;
                fromAmino: (object: _99.MsgCreateEventParamsAmino) => _99.MsgCreateEventParams;
            };
            "/ems.v1.MsgIssueEventNFTParams": {
                aminoType: string;
                toAmino: (message: _99.MsgIssueEventNFTParams) => _99.MsgIssueEventNFTParamsAmino;
                fromAmino: (object: _99.MsgIssueEventNFTParamsAmino) => _99.MsgIssueEventNFTParams;
            };
            "/ems.v1.MsgAddEventOrganizerParams": {
                aminoType: string;
                toAmino: (message: _99.MsgAddEventOrganizerParams) => _99.MsgAddEventOrganizerParamsAmino;
                fromAmino: (object: _99.MsgAddEventOrganizerParamsAmino) => _99.MsgAddEventOrganizerParams;
            };
            "/ems.v1.MsgUpdateEventStatusParams": {
                aminoType: string;
                toAmino: (message: _99.MsgUpdateEventStatusParams) => _99.MsgUpdateEventStatusParamsAmino;
                fromAmino: (object: _99.MsgUpdateEventStatusParamsAmino) => _99.MsgUpdateEventStatusParams;
            };
        };
        MsgUpdateParams: {
            typeUrl: string;
            encode(message: _99.MsgUpdateParams, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _99.MsgUpdateParams;
            fromPartial(object: Partial<_99.MsgUpdateParams>): _99.MsgUpdateParams;
            fromAmino(object: _99.MsgUpdateParamsAmino): _99.MsgUpdateParams;
            toAmino(message: _99.MsgUpdateParams): _99.MsgUpdateParamsAmino;
            fromAminoMsg(object: _99.MsgUpdateParamsAminoMsg): _99.MsgUpdateParams;
            fromProtoMsg(message: _99.MsgUpdateParamsProtoMsg): _99.MsgUpdateParams;
            toProto(message: _99.MsgUpdateParams): Uint8Array;
            toProtoMsg(message: _99.MsgUpdateParams): _99.MsgUpdateParamsProtoMsg;
        };
        MsgUpdateParamsResponse: {
            typeUrl: string;
            encode(_: _99.MsgUpdateParamsResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _99.MsgUpdateParamsResponse;
            fromPartial(_: Partial<_99.MsgUpdateParamsResponse>): _99.MsgUpdateParamsResponse;
            fromAmino(_: _99.MsgUpdateParamsResponseAmino): _99.MsgUpdateParamsResponse;
            toAmino(_: _99.MsgUpdateParamsResponse): _99.MsgUpdateParamsResponseAmino;
            fromAminoMsg(object: _99.MsgUpdateParamsResponseAminoMsg): _99.MsgUpdateParamsResponse;
            fromProtoMsg(message: _99.MsgUpdateParamsResponseProtoMsg): _99.MsgUpdateParamsResponse;
            toProto(message: _99.MsgUpdateParamsResponse): Uint8Array;
            toProtoMsg(message: _99.MsgUpdateParamsResponse): _99.MsgUpdateParamsResponseProtoMsg;
        };
        MsgCreateEventParams: {
            typeUrl: string;
            encode(message: _99.MsgCreateEventParams, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _99.MsgCreateEventParams;
            fromPartial(object: Partial<_99.MsgCreateEventParams>): _99.MsgCreateEventParams;
            fromAmino(object: _99.MsgCreateEventParamsAmino): _99.MsgCreateEventParams;
            toAmino(message: _99.MsgCreateEventParams): _99.MsgCreateEventParamsAmino;
            fromAminoMsg(object: _99.MsgCreateEventParamsAminoMsg): _99.MsgCreateEventParams;
            fromProtoMsg(message: _99.MsgCreateEventParamsProtoMsg): _99.MsgCreateEventParams;
            toProto(message: _99.MsgCreateEventParams): Uint8Array;
            toProtoMsg(message: _99.MsgCreateEventParams): _99.MsgCreateEventParamsProtoMsg;
        };
        MsgCreateEventResponse: {
            typeUrl: string;
            encode(_: _99.MsgCreateEventResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _99.MsgCreateEventResponse;
            fromPartial(_: Partial<_99.MsgCreateEventResponse>): _99.MsgCreateEventResponse;
            fromAmino(_: _99.MsgCreateEventResponseAmino): _99.MsgCreateEventResponse;
            toAmino(_: _99.MsgCreateEventResponse): _99.MsgCreateEventResponseAmino;
            fromAminoMsg(object: _99.MsgCreateEventResponseAminoMsg): _99.MsgCreateEventResponse;
            fromProtoMsg(message: _99.MsgCreateEventResponseProtoMsg): _99.MsgCreateEventResponse;
            toProto(message: _99.MsgCreateEventResponse): Uint8Array;
            toProtoMsg(message: _99.MsgCreateEventResponse): _99.MsgCreateEventResponseProtoMsg;
        };
        MsgIssueEventNFTParams: {
            typeUrl: string;
            encode(message: _99.MsgIssueEventNFTParams, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _99.MsgIssueEventNFTParams;
            fromPartial(object: Partial<_99.MsgIssueEventNFTParams>): _99.MsgIssueEventNFTParams;
            fromAmino(object: _99.MsgIssueEventNFTParamsAmino): _99.MsgIssueEventNFTParams;
            toAmino(message: _99.MsgIssueEventNFTParams): _99.MsgIssueEventNFTParamsAmino;
            fromAminoMsg(object: _99.MsgIssueEventNFTParamsAminoMsg): _99.MsgIssueEventNFTParams;
            fromProtoMsg(message: _99.MsgIssueEventNFTParamsProtoMsg): _99.MsgIssueEventNFTParams;
            toProto(message: _99.MsgIssueEventNFTParams): Uint8Array;
            toProtoMsg(message: _99.MsgIssueEventNFTParams): _99.MsgIssueEventNFTParamsProtoMsg;
        };
        MsgIssueEventNFTResponse: {
            typeUrl: string;
            encode(_: _99.MsgIssueEventNFTResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _99.MsgIssueEventNFTResponse;
            fromPartial(_: Partial<_99.MsgIssueEventNFTResponse>): _99.MsgIssueEventNFTResponse;
            fromAmino(_: _99.MsgIssueEventNFTResponseAmino): _99.MsgIssueEventNFTResponse;
            toAmino(_: _99.MsgIssueEventNFTResponse): _99.MsgIssueEventNFTResponseAmino;
            fromAminoMsg(object: _99.MsgIssueEventNFTResponseAminoMsg): _99.MsgIssueEventNFTResponse;
            fromProtoMsg(message: _99.MsgIssueEventNFTResponseProtoMsg): _99.MsgIssueEventNFTResponse;
            toProto(message: _99.MsgIssueEventNFTResponse): Uint8Array;
            toProtoMsg(message: _99.MsgIssueEventNFTResponse): _99.MsgIssueEventNFTResponseProtoMsg;
        };
        MsgAddEventOrganizerParams: {
            typeUrl: string;
            encode(message: _99.MsgAddEventOrganizerParams, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _99.MsgAddEventOrganizerParams;
            fromPartial(object: Partial<_99.MsgAddEventOrganizerParams>): _99.MsgAddEventOrganizerParams;
            fromAmino(object: _99.MsgAddEventOrganizerParamsAmino): _99.MsgAddEventOrganizerParams;
            toAmino(message: _99.MsgAddEventOrganizerParams): _99.MsgAddEventOrganizerParamsAmino;
            fromAminoMsg(object: _99.MsgAddEventOrganizerParamsAminoMsg): _99.MsgAddEventOrganizerParams;
            fromProtoMsg(message: _99.MsgAddEventOrganizerParamsProtoMsg): _99.MsgAddEventOrganizerParams;
            toProto(message: _99.MsgAddEventOrganizerParams): Uint8Array;
            toProtoMsg(message: _99.MsgAddEventOrganizerParams): _99.MsgAddEventOrganizerParamsProtoMsg;
        };
        MsgAddEventOrganizerResponse: {
            typeUrl: string;
            encode(_: _99.MsgAddEventOrganizerResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _99.MsgAddEventOrganizerResponse;
            fromPartial(_: Partial<_99.MsgAddEventOrganizerResponse>): _99.MsgAddEventOrganizerResponse;
            fromAmino(_: _99.MsgAddEventOrganizerResponseAmino): _99.MsgAddEventOrganizerResponse;
            toAmino(_: _99.MsgAddEventOrganizerResponse): _99.MsgAddEventOrganizerResponseAmino;
            fromAminoMsg(object: _99.MsgAddEventOrganizerResponseAminoMsg): _99.MsgAddEventOrganizerResponse;
            fromProtoMsg(message: _99.MsgAddEventOrganizerResponseProtoMsg): _99.MsgAddEventOrganizerResponse;
            toProto(message: _99.MsgAddEventOrganizerResponse): Uint8Array;
            toProtoMsg(message: _99.MsgAddEventOrganizerResponse): _99.MsgAddEventOrganizerResponseProtoMsg;
        };
        MsgUpdateEventStatusParams: {
            typeUrl: string;
            encode(message: _99.MsgUpdateEventStatusParams, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _99.MsgUpdateEventStatusParams;
            fromPartial(object: Partial<_99.MsgUpdateEventStatusParams>): _99.MsgUpdateEventStatusParams;
            fromAmino(object: _99.MsgUpdateEventStatusParamsAmino): _99.MsgUpdateEventStatusParams;
            toAmino(message: _99.MsgUpdateEventStatusParams): _99.MsgUpdateEventStatusParamsAmino;
            fromAminoMsg(object: _99.MsgUpdateEventStatusParamsAminoMsg): _99.MsgUpdateEventStatusParams;
            fromProtoMsg(message: _99.MsgUpdateEventStatusParamsProtoMsg): _99.MsgUpdateEventStatusParams;
            toProto(message: _99.MsgUpdateEventStatusParams): Uint8Array;
            toProtoMsg(message: _99.MsgUpdateEventStatusParams): _99.MsgUpdateEventStatusParamsProtoMsg;
        };
        MsgUpdateEventStatusResponse: {
            typeUrl: string;
            encode(_: _99.MsgUpdateEventStatusResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _99.MsgUpdateEventStatusResponse;
            fromPartial(_: Partial<_99.MsgUpdateEventStatusResponse>): _99.MsgUpdateEventStatusResponse;
            fromAmino(_: _99.MsgUpdateEventStatusResponseAmino): _99.MsgUpdateEventStatusResponse;
            toAmino(_: _99.MsgUpdateEventStatusResponse): _99.MsgUpdateEventStatusResponseAmino;
            fromAminoMsg(object: _99.MsgUpdateEventStatusResponseAminoMsg): _99.MsgUpdateEventStatusResponse;
            fromProtoMsg(message: _99.MsgUpdateEventStatusResponseProtoMsg): _99.MsgUpdateEventStatusResponse;
            toProto(message: _99.MsgUpdateEventStatusResponse): Uint8Array;
            toProtoMsg(message: _99.MsgUpdateEventStatusResponse): _99.MsgUpdateEventStatusResponseProtoMsg;
        };
        ExampleData: {
            typeUrl: string;
            encode(message: _98.ExampleData, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _98.ExampleData;
            fromPartial(object: Partial<_98.ExampleData>): _98.ExampleData;
            fromAmino(object: _98.ExampleDataAmino): _98.ExampleData;
            toAmino(message: _98.ExampleData): _98.ExampleDataAmino;
            fromAminoMsg(object: _98.ExampleDataAminoMsg): _98.ExampleData;
            fromProtoMsg(message: _98.ExampleDataProtoMsg): _98.ExampleData;
            toProto(message: _98.ExampleData): Uint8Array;
            toProtoMsg(message: _98.ExampleData): _98.ExampleDataProtoMsg;
        };
        QueryParamsRequest: {
            typeUrl: string;
            encode(_: _97.QueryParamsRequest, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _97.QueryParamsRequest;
            fromPartial(_: Partial<_97.QueryParamsRequest>): _97.QueryParamsRequest;
            fromAmino(_: _97.QueryParamsRequestAmino): _97.QueryParamsRequest;
            toAmino(_: _97.QueryParamsRequest): _97.QueryParamsRequestAmino;
            fromAminoMsg(object: _97.QueryParamsRequestAminoMsg): _97.QueryParamsRequest;
            fromProtoMsg(message: _97.QueryParamsRequestProtoMsg): _97.QueryParamsRequest;
            toProto(message: _97.QueryParamsRequest): Uint8Array;
            toProtoMsg(message: _97.QueryParamsRequest): _97.QueryParamsRequestProtoMsg;
        };
        QueryParamsResponse: {
            typeUrl: string;
            encode(message: _97.QueryParamsResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _97.QueryParamsResponse;
            fromPartial(object: Partial<_97.QueryParamsResponse>): _97.QueryParamsResponse;
            fromAmino(object: _97.QueryParamsResponseAmino): _97.QueryParamsResponse;
            toAmino(message: _97.QueryParamsResponse): _97.QueryParamsResponseAmino;
            fromAminoMsg(object: _97.QueryParamsResponseAminoMsg): _97.QueryParamsResponse;
            fromProtoMsg(message: _97.QueryParamsResponseProtoMsg): _97.QueryParamsResponse;
            toProto(message: _97.QueryParamsResponse): Uint8Array;
            toProtoMsg(message: _97.QueryParamsResponse): _97.QueryParamsResponseProtoMsg;
        };
        QueryGetEventRequest: {
            typeUrl: string;
            encode(message: _97.QueryGetEventRequest, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _97.QueryGetEventRequest;
            fromPartial(object: Partial<_97.QueryGetEventRequest>): _97.QueryGetEventRequest;
            fromAmino(object: _97.QueryGetEventRequestAmino): _97.QueryGetEventRequest;
            toAmino(message: _97.QueryGetEventRequest): _97.QueryGetEventRequestAmino;
            fromAminoMsg(object: _97.QueryGetEventRequestAminoMsg): _97.QueryGetEventRequest;
            fromProtoMsg(message: _97.QueryGetEventRequestProtoMsg): _97.QueryGetEventRequest;
            toProto(message: _97.QueryGetEventRequest): Uint8Array;
            toProtoMsg(message: _97.QueryGetEventRequest): _97.QueryGetEventRequestProtoMsg;
        };
        QueryGetEventResponse: {
            typeUrl: string;
            encode(message: _97.QueryGetEventResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _97.QueryGetEventResponse;
            fromPartial(object: Partial<_97.QueryGetEventResponse>): _97.QueryGetEventResponse;
            fromAmino(object: _97.QueryGetEventResponseAmino): _97.QueryGetEventResponse;
            toAmino(message: _97.QueryGetEventResponse): _97.QueryGetEventResponseAmino;
            fromAminoMsg(object: _97.QueryGetEventResponseAminoMsg): _97.QueryGetEventResponse;
            fromProtoMsg(message: _97.QueryGetEventResponseProtoMsg): _97.QueryGetEventResponse;
            toProto(message: _97.QueryGetEventResponse): Uint8Array;
            toProtoMsg(message: _97.QueryGetEventResponse): _97.QueryGetEventResponseProtoMsg;
        };
        GenesisState: {
            typeUrl: string;
            encode(message: _96.GenesisState, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _96.GenesisState;
            fromPartial(object: Partial<_96.GenesisState>): _96.GenesisState;
            fromAmino(object: _96.GenesisStateAmino): _96.GenesisState;
            toAmino(message: _96.GenesisState): _96.GenesisStateAmino;
            fromAminoMsg(object: _96.GenesisStateAminoMsg): _96.GenesisState;
            fromProtoMsg(message: _96.GenesisStateProtoMsg): _96.GenesisState;
            toProto(message: _96.GenesisState): Uint8Array;
            toProtoMsg(message: _96.GenesisState): _96.GenesisStateProtoMsg;
        };
        Params: {
            typeUrl: string;
            encode(message: _96.Params, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _96.Params;
            fromPartial(object: Partial<_96.Params>): _96.Params;
            fromAmino(object: _96.ParamsAmino): _96.Params;
            toAmino(message: _96.Params): _96.ParamsAmino;
            fromAminoMsg(object: _96.ParamsAminoMsg): _96.Params;
            toAminoMsg(message: _96.Params): _96.ParamsAminoMsg;
            fromProtoMsg(message: _96.ParamsProtoMsg): _96.Params;
            toProto(message: _96.Params): Uint8Array;
            toProtoMsg(message: _96.Params): _96.ParamsProtoMsg;
        };
        Event: {
            typeUrl: string;
            encode(message: _95.Event, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: import("..").BinaryReader | Uint8Array, length?: number): _95.Event;
            fromPartial(object: Partial<_95.Event>): _95.Event;
            fromAmino(object: _95.EventAmino): _95.Event;
            toAmino(message: _95.Event): _95.EventAmino;
            fromAminoMsg(object: _95.EventAminoMsg): _95.Event;
            fromProtoMsg(message: _95.EventProtoMsg): _95.Event;
            toProto(message: _95.Event): Uint8Array;
            toProtoMsg(message: _95.Event): _95.EventProtoMsg;
        };
    };
    const ClientFactory: {
        createRPCMsgClient: ({ rpc }: {
            rpc: import("../helpers").Rpc;
        }) => Promise<{
            cosmos: {
                authz: {
                    v1beta1: import("../cosmos/authz/v1beta1/tx.rpc.msg").MsgClientImpl;
                };
                bank: {
                    v1beta1: import("../cosmos/bank/v1beta1/tx.rpc.msg").MsgClientImpl;
                };
                crisis: {
                    v1beta1: import("../cosmos/crisis/v1beta1/tx.rpc.msg").MsgClientImpl;
                };
                distribution: {
                    v1beta1: import("../cosmos/distribution/v1beta1/tx.rpc.msg").MsgClientImpl;
                };
                evidence: {
                    v1beta1: import("../cosmos/evidence/v1beta1/tx.rpc.msg").MsgClientImpl;
                };
                feegrant: {
                    v1beta1: import("../cosmos/feegrant/v1beta1/tx.rpc.msg").MsgClientImpl;
                };
                gov: {
                    v1: import("../cosmos/gov/v1/tx.rpc.msg").MsgClientImpl;
                    v1beta1: import("../cosmos/gov/v1beta1/tx.rpc.msg").MsgClientImpl;
                };
                group: {
                    v1: import("../cosmos/group/v1/tx.rpc.msg").MsgClientImpl;
                };
                nft: {
                    v1beta1: import("../cosmos/nft/v1beta1/tx.rpc.msg").MsgClientImpl;
                };
                slashing: {
                    v1beta1: import("../cosmos/slashing/v1beta1/tx.rpc.msg").MsgClientImpl;
                };
                staking: {
                    v1beta1: import("../cosmos/staking/v1beta1/tx.rpc.msg").MsgClientImpl;
                };
                upgrade: {
                    v1beta1: import("../cosmos/upgrade/v1beta1/tx.rpc.msg").MsgClientImpl;
                };
                vesting: {
                    v1beta1: import("../cosmos/vesting/v1beta1/tx.rpc.msg").MsgClientImpl;
                };
            };
            ems: {
                v1: _200.MsgClientImpl;
            };
        }>;
        createRPCQueryClient: ({ rpcEndpoint }: {
            rpcEndpoint: string | import("@cosmjs/tendermint-rpc").HttpEndpoint;
        }) => Promise<{
            cosmos: {
                app: {
                    v1alpha1: {
                        config(request?: import("../cosmos/app/v1alpha1/query").QueryConfigRequest): Promise<import("../cosmos/app/v1alpha1/query").QueryConfigResponse>;
                    };
                };
                auth: {
                    v1beta1: {
                        accounts(request?: import("../cosmos/auth/v1beta1/query").QueryAccountsRequest): Promise<import("../cosmos/auth/v1beta1/query").QueryAccountsResponse>;
                        account(request: import("../cosmos/auth/v1beta1/query").QueryAccountRequest): Promise<import("../cosmos/auth/v1beta1/query").QueryAccountResponse>;
                        params(request?: import("../cosmos/auth/v1beta1/query").QueryParamsRequest): Promise<import("../cosmos/auth/v1beta1/query").QueryParamsResponse>;
                        moduleAccounts(request?: import("../cosmos/auth/v1beta1/query").QueryModuleAccountsRequest): Promise<import("../cosmos/auth/v1beta1/query").QueryModuleAccountsResponse>;
                        bech32Prefix(request?: import("../cosmos/auth/v1beta1/query").Bech32PrefixRequest): Promise<import("../cosmos/auth/v1beta1/query").Bech32PrefixResponse>;
                        addressBytesToString(request: import("../cosmos/auth/v1beta1/query").AddressBytesToStringRequest): Promise<import("../cosmos/auth/v1beta1/query").AddressBytesToStringResponse>;
                        addressStringToBytes(request: import("../cosmos/auth/v1beta1/query").AddressStringToBytesRequest): Promise<import("../cosmos/auth/v1beta1/query").AddressStringToBytesResponse>;
                    };
                };
                authz: {
                    v1beta1: {
                        grants(request: import("../cosmos/authz/v1beta1/query").QueryGrantsRequest): Promise<import("../cosmos/authz/v1beta1/query").QueryGrantsResponse>;
                        granterGrants(request: import("../cosmos/authz/v1beta1/query").QueryGranterGrantsRequest): Promise<import("../cosmos/authz/v1beta1/query").QueryGranterGrantsResponse>;
                        granteeGrants(request: import("../cosmos/authz/v1beta1/query").QueryGranteeGrantsRequest): Promise<import("../cosmos/authz/v1beta1/query").QueryGranteeGrantsResponse>;
                    };
                };
                bank: {
                    v1beta1: {
                        balance(request: import("../cosmos/bank/v1beta1/query").QueryBalanceRequest): Promise<import("../cosmos/bank/v1beta1/query").QueryBalanceResponse>;
                        allBalances(request: import("../cosmos/bank/v1beta1/query").QueryAllBalancesRequest): Promise<import("../cosmos/bank/v1beta1/query").QueryAllBalancesResponse>;
                        spendableBalances(request: import("../cosmos/bank/v1beta1/query").QuerySpendableBalancesRequest): Promise<import("../cosmos/bank/v1beta1/query").QuerySpendableBalancesResponse>;
                        totalSupply(request?: import("../cosmos/bank/v1beta1/query").QueryTotalSupplyRequest): Promise<import("../cosmos/bank/v1beta1/query").QueryTotalSupplyResponse>;
                        supplyOf(request: import("../cosmos/bank/v1beta1/query").QuerySupplyOfRequest): Promise<import("../cosmos/bank/v1beta1/query").QuerySupplyOfResponse>;
                        params(request?: import("../cosmos/bank/v1beta1/query").QueryParamsRequest): Promise<import("../cosmos/bank/v1beta1/query").QueryParamsResponse>;
                        denomMetadata(request: import("../cosmos/bank/v1beta1/query").QueryDenomMetadataRequest): Promise<import("../cosmos/bank/v1beta1/query").QueryDenomMetadataResponse>;
                        denomsMetadata(request?: import("../cosmos/bank/v1beta1/query").QueryDenomsMetadataRequest): Promise<import("../cosmos/bank/v1beta1/query").QueryDenomsMetadataResponse>;
                        denomOwners(request: import("../cosmos/bank/v1beta1/query").QueryDenomOwnersRequest): Promise<import("../cosmos/bank/v1beta1/query").QueryDenomOwnersResponse>;
                    };
                };
                base: {
                    tendermint: {
                        v1beta1: {
                            getNodeInfo(request?: import("../cosmos/base/tendermint/v1beta1/query").GetNodeInfoRequest): Promise<import("../cosmos/base/tendermint/v1beta1/query").GetNodeInfoResponse>;
                            getSyncing(request?: import("../cosmos/base/tendermint/v1beta1/query").GetSyncingRequest): Promise<import("../cosmos/base/tendermint/v1beta1/query").GetSyncingResponse>;
                            getLatestBlock(request?: import("../cosmos/base/tendermint/v1beta1/query").GetLatestBlockRequest): Promise<import("../cosmos/base/tendermint/v1beta1/query").GetLatestBlockResponse>;
                            getBlockByHeight(request: import("../cosmos/base/tendermint/v1beta1/query").GetBlockByHeightRequest): Promise<import("../cosmos/base/tendermint/v1beta1/query").GetBlockByHeightResponse>;
                            getLatestValidatorSet(request?: import("../cosmos/base/tendermint/v1beta1/query").GetLatestValidatorSetRequest): Promise<import("../cosmos/base/tendermint/v1beta1/query").GetLatestValidatorSetResponse>;
                            getValidatorSetByHeight(request: import("../cosmos/base/tendermint/v1beta1/query").GetValidatorSetByHeightRequest): Promise<import("../cosmos/base/tendermint/v1beta1/query").GetValidatorSetByHeightResponse>;
                        };
                    };
                };
                distribution: {
                    v1beta1: {
                        params(request?: import("../cosmos/distribution/v1beta1/query").QueryParamsRequest): Promise<import("../cosmos/distribution/v1beta1/query").QueryParamsResponse>;
                        validatorOutstandingRewards(request: import("../cosmos/distribution/v1beta1/query").QueryValidatorOutstandingRewardsRequest): Promise<import("../cosmos/distribution/v1beta1/query").QueryValidatorOutstandingRewardsResponse>;
                        validatorCommission(request: import("../cosmos/distribution/v1beta1/query").QueryValidatorCommissionRequest): Promise<import("../cosmos/distribution/v1beta1/query").QueryValidatorCommissionResponse>;
                        validatorSlashes(request: import("../cosmos/distribution/v1beta1/query").QueryValidatorSlashesRequest): Promise<import("../cosmos/distribution/v1beta1/query").QueryValidatorSlashesResponse>;
                        delegationRewards(request: import("../cosmos/distribution/v1beta1/query").QueryDelegationRewardsRequest): Promise<import("../cosmos/distribution/v1beta1/query").QueryDelegationRewardsResponse>;
                        delegationTotalRewards(request: import("../cosmos/distribution/v1beta1/query").QueryDelegationTotalRewardsRequest): Promise<import("../cosmos/distribution/v1beta1/query").QueryDelegationTotalRewardsResponse>;
                        delegatorValidators(request: import("../cosmos/distribution/v1beta1/query").QueryDelegatorValidatorsRequest): Promise<import("../cosmos/distribution/v1beta1/query").QueryDelegatorValidatorsResponse>;
                        delegatorWithdrawAddress(request: import("../cosmos/distribution/v1beta1/query").QueryDelegatorWithdrawAddressRequest): Promise<import("../cosmos/distribution/v1beta1/query").QueryDelegatorWithdrawAddressResponse>;
                        communityPool(request?: import("../cosmos/distribution/v1beta1/query").QueryCommunityPoolRequest): Promise<import("../cosmos/distribution/v1beta1/query").QueryCommunityPoolResponse>;
                    };
                };
                evidence: {
                    v1beta1: {
                        evidence(request: import("../cosmos/evidence/v1beta1/query").QueryEvidenceRequest): Promise<import("../cosmos/evidence/v1beta1/query").QueryEvidenceResponse>;
                        allEvidence(request?: import("../cosmos/evidence/v1beta1/query").QueryAllEvidenceRequest): Promise<import("../cosmos/evidence/v1beta1/query").QueryAllEvidenceResponse>;
                    };
                };
                feegrant: {
                    v1beta1: {
                        allowance(request: import("../cosmos/feegrant/v1beta1/query").QueryAllowanceRequest): Promise<import("../cosmos/feegrant/v1beta1/query").QueryAllowanceResponse>;
                        allowances(request: import("../cosmos/feegrant/v1beta1/query").QueryAllowancesRequest): Promise<import("../cosmos/feegrant/v1beta1/query").QueryAllowancesResponse>;
                        allowancesByGranter(request: import("../cosmos/feegrant/v1beta1/query").QueryAllowancesByGranterRequest): Promise<import("../cosmos/feegrant/v1beta1/query").QueryAllowancesByGranterResponse>;
                    };
                };
                gov: {
                    v1: {
                        proposal(request: import("../cosmos/gov/v1/query").QueryProposalRequest): Promise<import("../cosmos/gov/v1/query").QueryProposalResponse>;
                        proposals(request: import("../cosmos/gov/v1/query").QueryProposalsRequest): Promise<import("../cosmos/gov/v1/query").QueryProposalsResponse>;
                        vote(request: import("../cosmos/gov/v1/query").QueryVoteRequest): Promise<import("../cosmos/gov/v1/query").QueryVoteResponse>;
                        votes(request: import("../cosmos/gov/v1/query").QueryVotesRequest): Promise<import("../cosmos/gov/v1/query").QueryVotesResponse>;
                        params(request: import("../cosmos/gov/v1/query").QueryParamsRequest): Promise<import("../cosmos/gov/v1/query").QueryParamsResponse>;
                        deposit(request: import("../cosmos/gov/v1/query").QueryDepositRequest): Promise<import("../cosmos/gov/v1/query").QueryDepositResponse>;
                        deposits(request: import("../cosmos/gov/v1/query").QueryDepositsRequest): Promise<import("../cosmos/gov/v1/query").QueryDepositsResponse>;
                        tallyResult(request: import("../cosmos/gov/v1/query").QueryTallyResultRequest): Promise<import("../cosmos/gov/v1/query").QueryTallyResultResponse>;
                    };
                    v1beta1: {
                        proposal(request: import("../cosmos/gov/v1beta1/query").QueryProposalRequest): Promise<import("../cosmos/gov/v1beta1/query").QueryProposalResponse>;
                        proposals(request: import("../cosmos/gov/v1beta1/query").QueryProposalsRequest): Promise<import("../cosmos/gov/v1beta1/query").QueryProposalsResponse>;
                        vote(request: import("../cosmos/gov/v1beta1/query").QueryVoteRequest): Promise<import("../cosmos/gov/v1beta1/query").QueryVoteResponse>;
                        votes(request: import("../cosmos/gov/v1beta1/query").QueryVotesRequest): Promise<import("../cosmos/gov/v1beta1/query").QueryVotesResponse>;
                        params(request: import("../cosmos/gov/v1beta1/query").QueryParamsRequest): Promise<import("../cosmos/gov/v1beta1/query").QueryParamsResponse>;
                        deposit(request: import("../cosmos/gov/v1beta1/query").QueryDepositRequest): Promise<import("../cosmos/gov/v1beta1/query").QueryDepositResponse>;
                        deposits(request: import("../cosmos/gov/v1beta1/query").QueryDepositsRequest): Promise<import("../cosmos/gov/v1beta1/query").QueryDepositsResponse>;
                        tallyResult(request: import("../cosmos/gov/v1beta1/query").QueryTallyResultRequest): Promise<import("../cosmos/gov/v1beta1/query").QueryTallyResultResponse>;
                    };
                };
                group: {
                    v1: {
                        groupInfo(request: import("../cosmos/group/v1/query").QueryGroupInfoRequest): Promise<import("../cosmos/group/v1/query").QueryGroupInfoResponse>;
                        groupPolicyInfo(request: import("../cosmos/group/v1/query").QueryGroupPolicyInfoRequest): Promise<import("../cosmos/group/v1/query").QueryGroupPolicyInfoResponse>;
                        groupMembers(request: import("../cosmos/group/v1/query").QueryGroupMembersRequest): Promise<import("../cosmos/group/v1/query").QueryGroupMembersResponse>;
                        groupsByAdmin(request: import("../cosmos/group/v1/query").QueryGroupsByAdminRequest): Promise<import("../cosmos/group/v1/query").QueryGroupsByAdminResponse>;
                        groupPoliciesByGroup(request: import("../cosmos/group/v1/query").QueryGroupPoliciesByGroupRequest): Promise<import("../cosmos/group/v1/query").QueryGroupPoliciesByGroupResponse>;
                        groupPoliciesByAdmin(request: import("../cosmos/group/v1/query").QueryGroupPoliciesByAdminRequest): Promise<import("../cosmos/group/v1/query").QueryGroupPoliciesByAdminResponse>;
                        proposal(request: import("../cosmos/group/v1/query").QueryProposalRequest): Promise<import("../cosmos/group/v1/query").QueryProposalResponse>;
                        proposalsByGroupPolicy(request: import("../cosmos/group/v1/query").QueryProposalsByGroupPolicyRequest): Promise<import("../cosmos/group/v1/query").QueryProposalsByGroupPolicyResponse>;
                        voteByProposalVoter(request: import("../cosmos/group/v1/query").QueryVoteByProposalVoterRequest): Promise<import("../cosmos/group/v1/query").QueryVoteByProposalVoterResponse>;
                        votesByProposal(request: import("../cosmos/group/v1/query").QueryVotesByProposalRequest): Promise<import("../cosmos/group/v1/query").QueryVotesByProposalResponse>;
                        votesByVoter(request: import("../cosmos/group/v1/query").QueryVotesByVoterRequest): Promise<import("../cosmos/group/v1/query").QueryVotesByVoterResponse>;
                        groupsByMember(request: import("../cosmos/group/v1/query").QueryGroupsByMemberRequest): Promise<import("../cosmos/group/v1/query").QueryGroupsByMemberResponse>;
                        tallyResult(request: import("../cosmos/group/v1/query").QueryTallyResultRequest): Promise<import("../cosmos/group/v1/query").QueryTallyResultResponse>;
                    };
                };
                mint: {
                    v1beta1: {
                        params(request?: import("../cosmos/mint/v1beta1/query").QueryParamsRequest): Promise<import("../cosmos/mint/v1beta1/query").QueryParamsResponse>;
                        inflation(request?: import("../cosmos/mint/v1beta1/query").QueryInflationRequest): Promise<import("../cosmos/mint/v1beta1/query").QueryInflationResponse>;
                        annualProvisions(request?: import("../cosmos/mint/v1beta1/query").QueryAnnualProvisionsRequest): Promise<import("../cosmos/mint/v1beta1/query").QueryAnnualProvisionsResponse>;
                    };
                };
                nft: {
                    v1beta1: {
                        balance(request: import("../cosmos/nft/v1beta1/query").QueryBalanceRequest): Promise<import("../cosmos/nft/v1beta1/query").QueryBalanceResponse>;
                        owner(request: import("../cosmos/nft/v1beta1/query").QueryOwnerRequest): Promise<import("../cosmos/nft/v1beta1/query").QueryOwnerResponse>;
                        supply(request: import("../cosmos/nft/v1beta1/query").QuerySupplyRequest): Promise<import("../cosmos/nft/v1beta1/query").QuerySupplyResponse>;
                        nFTs(request: import("../cosmos/nft/v1beta1/query").QueryNFTsRequest): Promise<import("../cosmos/nft/v1beta1/query").QueryNFTsResponse>;
                        nFT(request: import("../cosmos/nft/v1beta1/query").QueryNFTRequest): Promise<import("../cosmos/nft/v1beta1/query").QueryNFTResponse>;
                        class(request: import("../cosmos/nft/v1beta1/query").QueryClassRequest): Promise<import("../cosmos/nft/v1beta1/query").QueryClassResponse>;
                        classes(request?: import("../cosmos/nft/v1beta1/query").QueryClassesRequest): Promise<import("../cosmos/nft/v1beta1/query").QueryClassesResponse>;
                    };
                };
                params: {
                    v1beta1: {
                        params(request: import("../cosmos/params/v1beta1/query").QueryParamsRequest): Promise<import("../cosmos/params/v1beta1/query").QueryParamsResponse>;
                        subspaces(request?: import("../cosmos/params/v1beta1/query").QuerySubspacesRequest): Promise<import("../cosmos/params/v1beta1/query").QuerySubspacesResponse>;
                    };
                };
                slashing: {
                    v1beta1: {
                        params(request?: import("../cosmos/slashing/v1beta1/query").QueryParamsRequest): Promise<import("../cosmos/slashing/v1beta1/query").QueryParamsResponse>;
                        signingInfo(request: import("../cosmos/slashing/v1beta1/query").QuerySigningInfoRequest): Promise<import("../cosmos/slashing/v1beta1/query").QuerySigningInfoResponse>;
                        signingInfos(request?: import("../cosmos/slashing/v1beta1/query").QuerySigningInfosRequest): Promise<import("../cosmos/slashing/v1beta1/query").QuerySigningInfosResponse>;
                    };
                };
                staking: {
                    v1beta1: {
                        validators(request: import("../cosmos/staking/v1beta1/query").QueryValidatorsRequest): Promise<import("../cosmos/staking/v1beta1/query").QueryValidatorsResponse>;
                        validator(request: import("../cosmos/staking/v1beta1/query").QueryValidatorRequest): Promise<import("../cosmos/staking/v1beta1/query").QueryValidatorResponse>;
                        validatorDelegations(request: import("../cosmos/staking/v1beta1/query").QueryValidatorDelegationsRequest): Promise<import("../cosmos/staking/v1beta1/query").QueryValidatorDelegationsResponse>;
                        validatorUnbondingDelegations(request: import("../cosmos/staking/v1beta1/query").QueryValidatorUnbondingDelegationsRequest): Promise<import("../cosmos/staking/v1beta1/query").QueryValidatorUnbondingDelegationsResponse>;
                        delegation(request: import("../cosmos/staking/v1beta1/query").QueryDelegationRequest): Promise<import("../cosmos/staking/v1beta1/query").QueryDelegationResponse>;
                        unbondingDelegation(request: import("../cosmos/staking/v1beta1/query").QueryUnbondingDelegationRequest): Promise<import("../cosmos/staking/v1beta1/query").QueryUnbondingDelegationResponse>;
                        delegatorDelegations(request: import("../cosmos/staking/v1beta1/query").QueryDelegatorDelegationsRequest): Promise<import("../cosmos/staking/v1beta1/query").QueryDelegatorDelegationsResponse>;
                        delegatorUnbondingDelegations(request: import("../cosmos/staking/v1beta1/query").QueryDelegatorUnbondingDelegationsRequest): Promise<import("../cosmos/staking/v1beta1/query").QueryDelegatorUnbondingDelegationsResponse>;
                        redelegations(request: import("../cosmos/staking/v1beta1/query").QueryRedelegationsRequest): Promise<import("../cosmos/staking/v1beta1/query").QueryRedelegationsResponse>;
                        delegatorValidators(request: import("../cosmos/staking/v1beta1/query").QueryDelegatorValidatorsRequest): Promise<import("../cosmos/staking/v1beta1/query").QueryDelegatorValidatorsResponse>;
                        delegatorValidator(request: import("../cosmos/staking/v1beta1/query").QueryDelegatorValidatorRequest): Promise<import("../cosmos/staking/v1beta1/query").QueryDelegatorValidatorResponse>;
                        historicalInfo(request: import("../cosmos/staking/v1beta1/query").QueryHistoricalInfoRequest): Promise<import("../cosmos/staking/v1beta1/query").QueryHistoricalInfoResponse>;
                        pool(request?: import("../cosmos/staking/v1beta1/query").QueryPoolRequest): Promise<import("../cosmos/staking/v1beta1/query").QueryPoolResponse>;
                        params(request?: import("../cosmos/staking/v1beta1/query").QueryParamsRequest): Promise<import("../cosmos/staking/v1beta1/query").QueryParamsResponse>;
                    };
                };
                tx: {
                    v1beta1: {
                        simulate(request: import("../cosmos/tx/v1beta1/service").SimulateRequest): Promise<import("../cosmos/tx/v1beta1/service").SimulateResponse>;
                        getTx(request: import("../cosmos/tx/v1beta1/service").GetTxRequest): Promise<import("../cosmos/tx/v1beta1/service").GetTxResponse>;
                        broadcastTx(request: import("../cosmos/tx/v1beta1/service").BroadcastTxRequest): Promise<import("../cosmos/tx/v1beta1/service").BroadcastTxResponse>;
                        getTxsEvent(request: import("../cosmos/tx/v1beta1/service").GetTxsEventRequest): Promise<import("../cosmos/tx/v1beta1/service").GetTxsEventResponse>;
                        getBlockWithTxs(request: import("../cosmos/tx/v1beta1/service").GetBlockWithTxsRequest): Promise<import("../cosmos/tx/v1beta1/service").GetBlockWithTxsResponse>;
                    };
                };
                upgrade: {
                    v1beta1: {
                        currentPlan(request?: import("../cosmos/upgrade/v1beta1/query").QueryCurrentPlanRequest): Promise<import("../cosmos/upgrade/v1beta1/query").QueryCurrentPlanResponse>;
                        appliedPlan(request: import("../cosmos/upgrade/v1beta1/query").QueryAppliedPlanRequest): Promise<import("../cosmos/upgrade/v1beta1/query").QueryAppliedPlanResponse>;
                        upgradedConsensusState(request: import("../cosmos/upgrade/v1beta1/query").QueryUpgradedConsensusStateRequest): Promise<import("../cosmos/upgrade/v1beta1/query").QueryUpgradedConsensusStateResponse>;
                        moduleVersions(request: import("../cosmos/upgrade/v1beta1/query").QueryModuleVersionsRequest): Promise<import("../cosmos/upgrade/v1beta1/query").QueryModuleVersionsResponse>;
                        authority(request?: import("../cosmos/upgrade/v1beta1/query").QueryAuthorityRequest): Promise<import("../cosmos/upgrade/v1beta1/query").QueryAuthorityResponse>;
                    };
                };
            };
            ems: {
                v1: {
                    params(request?: _97.QueryParamsRequest): Promise<_97.QueryParamsResponse>;
                    getEvent(request: _97.QueryGetEventRequest): Promise<_97.QueryGetEventResponse>;
                };
            };
        }>;
        createLCDClient: ({ restEndpoint }: {
            restEndpoint: string;
        }) => Promise<{
            cosmos: {
                auth: {
                    v1beta1: import("../cosmos/auth/v1beta1/query.lcd").LCDQueryClient;
                };
                authz: {
                    v1beta1: import("../cosmos/authz/v1beta1/query.lcd").LCDQueryClient;
                };
                bank: {
                    v1beta1: import("../cosmos/bank/v1beta1/query.lcd").LCDQueryClient;
                };
                base: {
                    tendermint: {
                        v1beta1: import("../cosmos/base/tendermint/v1beta1/query.lcd").LCDQueryClient;
                    };
                };
                distribution: {
                    v1beta1: import("../cosmos/distribution/v1beta1/query.lcd").LCDQueryClient;
                };
                evidence: {
                    v1beta1: import("../cosmos/evidence/v1beta1/query.lcd").LCDQueryClient;
                };
                feegrant: {
                    v1beta1: import("../cosmos/feegrant/v1beta1/query.lcd").LCDQueryClient;
                };
                gov: {
                    v1: import("../cosmos/gov/v1/query.lcd").LCDQueryClient;
                    v1beta1: import("../cosmos/gov/v1beta1/query.lcd").LCDQueryClient;
                };
                group: {
                    v1: import("../cosmos/group/v1/query.lcd").LCDQueryClient;
                };
                mint: {
                    v1beta1: import("../cosmos/mint/v1beta1/query.lcd").LCDQueryClient;
                };
                nft: {
                    v1beta1: import("../cosmos/nft/v1beta1/query.lcd").LCDQueryClient;
                };
                params: {
                    v1beta1: import("../cosmos/params/v1beta1/query.lcd").LCDQueryClient;
                };
                slashing: {
                    v1beta1: import("../cosmos/slashing/v1beta1/query.lcd").LCDQueryClient;
                };
                staking: {
                    v1beta1: import("../cosmos/staking/v1beta1/query.lcd").LCDQueryClient;
                };
                tx: {
                    v1beta1: import("../cosmos/tx/v1beta1/service.lcd").LCDQueryClient;
                };
                upgrade: {
                    v1beta1: import("../cosmos/upgrade/v1beta1/query.lcd").LCDQueryClient;
                };
            };
            ems: {
                v1: _198.LCDQueryClient;
            };
        }>;
    };
}
