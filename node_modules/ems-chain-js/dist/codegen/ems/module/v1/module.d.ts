import { BinaryReader, BinaryWriter } from "../../../binary";
/**
 * Module is the app config object of the module.
 * Learn more: https://docs.cosmos.network/main/building-modules/depinject
 */
export interface Module {
}
export interface ModuleProtoMsg {
    typeUrl: "/ems.module.v1.Module";
    value: Uint8Array;
}
/**
 * Module is the app config object of the module.
 * Learn more: https://docs.cosmos.network/main/building-modules/depinject
 */
export interface ModuleAmino {
}
export interface ModuleAminoMsg {
    type: "/ems.module.v1.Module";
    value: ModuleAmino;
}
/**
 * Module is the app config object of the module.
 * Learn more: https://docs.cosmos.network/main/building-modules/depinject
 */
export interface ModuleSDKType {
}
export declare const Module: {
    typeUrl: string;
    encode(_: Module, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): Module;
    fromPartial(_: Partial<Module>): Module;
    fromAmino(_: ModuleAmino): Module;
    toAmino(_: Module): ModuleAmino;
    fromAminoMsg(object: ModuleAminoMsg): Module;
    fromProtoMsg(message: ModuleProtoMsg): Module;
    toProto(message: Module): Uint8Array;
    toProtoMsg(message: Module): ModuleProtoMsg;
};
