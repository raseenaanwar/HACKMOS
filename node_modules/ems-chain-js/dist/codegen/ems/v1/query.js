"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryGetEventResponse = exports.QueryGetEventRequest = exports.QueryParamsResponse = exports.QueryParamsRequest = void 0;
const genesis_1 = require("./genesis");
const ems_1 = require("./ems");
const binary_1 = require("../../binary");
function createBaseQueryParamsRequest() {
    return {};
}
exports.QueryParamsRequest = {
    typeUrl: "/ems.v1.QueryParamsRequest",
    encode(_, writer = binary_1.BinaryWriter.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(_) {
        const message = createBaseQueryParamsRequest();
        return message;
    },
    fromAmino(_) {
        const message = createBaseQueryParamsRequest();
        return message;
    },
    toAmino(_) {
        const obj = {};
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryParamsRequest.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.QueryParamsRequest.decode(message.value);
    },
    toProto(message) {
        return exports.QueryParamsRequest.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/ems.v1.QueryParamsRequest",
            value: exports.QueryParamsRequest.encode(message).finish()
        };
    }
};
function createBaseQueryParamsResponse() {
    return {
        params: undefined
    };
}
exports.QueryParamsResponse = {
    typeUrl: "/ems.v1.QueryParamsResponse",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.params !== undefined) {
            genesis_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.params = genesis_1.Params.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryParamsResponse();
        message.params = object.params !== undefined && object.params !== null ? genesis_1.Params.fromPartial(object.params) : undefined;
        return message;
    },
    fromAmino(object) {
        const message = createBaseQueryParamsResponse();
        if (object.params !== undefined && object.params !== null) {
            message.params = genesis_1.Params.fromAmino(object.params);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.params = message.params ? genesis_1.Params.toAmino(message.params) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryParamsResponse.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.QueryParamsResponse.decode(message.value);
    },
    toProto(message) {
        return exports.QueryParamsResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/ems.v1.QueryParamsResponse",
            value: exports.QueryParamsResponse.encode(message).finish()
        };
    }
};
function createBaseQueryGetEventRequest() {
    return {
        id: ""
    };
}
exports.QueryGetEventRequest = {
    typeUrl: "/ems.v1.QueryGetEventRequest",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetEventRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryGetEventRequest();
        message.id = object.id ?? "";
        return message;
    },
    fromAmino(object) {
        const message = createBaseQueryGetEventRequest();
        if (object.id !== undefined && object.id !== null) {
            message.id = object.id;
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.id = message.id === "" ? undefined : message.id;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryGetEventRequest.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.QueryGetEventRequest.decode(message.value);
    },
    toProto(message) {
        return exports.QueryGetEventRequest.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/ems.v1.QueryGetEventRequest",
            value: exports.QueryGetEventRequest.encode(message).finish()
        };
    }
};
function createBaseQueryGetEventResponse() {
    return {
        event: undefined
    };
}
exports.QueryGetEventResponse = {
    typeUrl: "/ems.v1.QueryGetEventResponse",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.event !== undefined) {
            ems_1.Event.encode(message.event, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetEventResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.event = ems_1.Event.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryGetEventResponse();
        message.event = object.event !== undefined && object.event !== null ? ems_1.Event.fromPartial(object.event) : undefined;
        return message;
    },
    fromAmino(object) {
        const message = createBaseQueryGetEventResponse();
        if (object.event !== undefined && object.event !== null) {
            message.event = ems_1.Event.fromAmino(object.event);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.event = message.event ? ems_1.Event.toAmino(message.event) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryGetEventResponse.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.QueryGetEventResponse.decode(message.value);
    },
    toProto(message) {
        return exports.QueryGetEventResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/ems.v1.QueryGetEventResponse",
            value: exports.QueryGetEventResponse.encode(message).finish()
        };
    }
};
//# sourceMappingURL=query.js.map