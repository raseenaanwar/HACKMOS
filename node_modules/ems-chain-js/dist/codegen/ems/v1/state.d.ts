import { BinaryReader, BinaryWriter } from "../../binary";
export interface ExampleData {
    account: Uint8Array;
    amount: bigint;
}
export interface ExampleDataProtoMsg {
    typeUrl: "/ems.v1.ExampleData";
    value: Uint8Array;
}
export interface ExampleDataAmino {
    account?: string;
    amount?: string;
}
export interface ExampleDataAminoMsg {
    type: "/ems.v1.ExampleData";
    value: ExampleDataAmino;
}
export interface ExampleDataSDKType {
    account: Uint8Array;
    amount: bigint;
}
export declare const ExampleData: {
    typeUrl: string;
    encode(message: ExampleData, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): ExampleData;
    fromPartial(object: Partial<ExampleData>): ExampleData;
    fromAmino(object: ExampleDataAmino): ExampleData;
    toAmino(message: ExampleData): ExampleDataAmino;
    fromAminoMsg(object: ExampleDataAminoMsg): ExampleData;
    fromProtoMsg(message: ExampleDataProtoMsg): ExampleData;
    toProto(message: ExampleData): Uint8Array;
    toProtoMsg(message: ExampleData): ExampleDataProtoMsg;
};
