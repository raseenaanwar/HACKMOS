"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgClientImpl = void 0;
const binary_1 = require("../../binary");
const tx_1 = require("./tx");
class MsgClientImpl {
    rpc;
    constructor(rpc) {
        this.rpc = rpc;
        this.updateParams = this.updateParams.bind(this);
        this.msgCreateEvent = this.msgCreateEvent.bind(this);
        this.msgIssueEventNFT = this.msgIssueEventNFT.bind(this);
        this.msgAddEventOrganizer = this.msgAddEventOrganizer.bind(this);
        this.msgUpdateEventStatus = this.msgUpdateEventStatus.bind(this);
    }
    updateParams(request) {
        const data = tx_1.MsgUpdateParams.encode(request).finish();
        const promise = this.rpc.request("ems.v1.Msg", "UpdateParams", data);
        return promise.then(data => tx_1.MsgUpdateParamsResponse.decode(new binary_1.BinaryReader(data)));
    }
    msgCreateEvent(request) {
        const data = tx_1.MsgCreateEventParams.encode(request).finish();
        const promise = this.rpc.request("ems.v1.Msg", "MsgCreateEvent", data);
        return promise.then(data => tx_1.MsgCreateEventResponse.decode(new binary_1.BinaryReader(data)));
    }
    msgIssueEventNFT(request) {
        const data = tx_1.MsgIssueEventNFTParams.encode(request).finish();
        const promise = this.rpc.request("ems.v1.Msg", "MsgIssueEventNFT", data);
        return promise.then(data => tx_1.MsgIssueEventNFTResponse.decode(new binary_1.BinaryReader(data)));
    }
    msgAddEventOrganizer(request) {
        const data = tx_1.MsgAddEventOrganizerParams.encode(request).finish();
        const promise = this.rpc.request("ems.v1.Msg", "MsgAddEventOrganizer", data);
        return promise.then(data => tx_1.MsgAddEventOrganizerResponse.decode(new binary_1.BinaryReader(data)));
    }
    msgUpdateEventStatus(request) {
        const data = tx_1.MsgUpdateEventStatusParams.encode(request).finish();
        const promise = this.rpc.request("ems.v1.Msg", "MsgUpdateEventStatus", data);
        return promise.then(data => tx_1.MsgUpdateEventStatusResponse.decode(new binary_1.BinaryReader(data)));
    }
}
exports.MsgClientImpl = MsgClientImpl;
//# sourceMappingURL=tx.rpc.msg.js.map