import { GeneratedType, Registry } from "@cosmjs/proto-signing";
import { MsgUpdateParams, MsgCreateEventParams, MsgIssueEventNFTParams, MsgAddEventOrganizerParams, MsgUpdateEventStatusParams } from "./tx";
export declare const registry: ReadonlyArray<[string, GeneratedType]>;
export declare const load: (protoRegistry: Registry) => void;
export declare const MessageComposer: {
    encoded: {
        updateParams(value: MsgUpdateParams): {
            typeUrl: string;
            value: Uint8Array;
        };
        msgCreateEvent(value: MsgCreateEventParams): {
            typeUrl: string;
            value: Uint8Array;
        };
        msgIssueEventNFT(value: MsgIssueEventNFTParams): {
            typeUrl: string;
            value: Uint8Array;
        };
        msgAddEventOrganizer(value: MsgAddEventOrganizerParams): {
            typeUrl: string;
            value: Uint8Array;
        };
        msgUpdateEventStatus(value: MsgUpdateEventStatusParams): {
            typeUrl: string;
            value: Uint8Array;
        };
    };
    withTypeUrl: {
        updateParams(value: MsgUpdateParams): {
            typeUrl: string;
            value: MsgUpdateParams;
        };
        msgCreateEvent(value: MsgCreateEventParams): {
            typeUrl: string;
            value: MsgCreateEventParams;
        };
        msgIssueEventNFT(value: MsgIssueEventNFTParams): {
            typeUrl: string;
            value: MsgIssueEventNFTParams;
        };
        msgAddEventOrganizer(value: MsgAddEventOrganizerParams): {
            typeUrl: string;
            value: MsgAddEventOrganizerParams;
        };
        msgUpdateEventStatus(value: MsgUpdateEventStatusParams): {
            typeUrl: string;
            value: MsgUpdateEventStatusParams;
        };
    };
    fromPartial: {
        updateParams(value: MsgUpdateParams): {
            typeUrl: string;
            value: MsgUpdateParams;
        };
        msgCreateEvent(value: MsgCreateEventParams): {
            typeUrl: string;
            value: MsgCreateEventParams;
        };
        msgIssueEventNFT(value: MsgIssueEventNFTParams): {
            typeUrl: string;
            value: MsgIssueEventNFTParams;
        };
        msgAddEventOrganizer(value: MsgAddEventOrganizerParams): {
            typeUrl: string;
            value: MsgAddEventOrganizerParams;
        };
        msgUpdateEventStatus(value: MsgUpdateEventStatusParams): {
            typeUrl: string;
            value: MsgUpdateEventStatusParams;
        };
    };
};
