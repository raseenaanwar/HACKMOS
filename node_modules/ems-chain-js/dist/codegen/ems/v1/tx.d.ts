import { Params, ParamsAmino, ParamsSDKType } from "./genesis";
import { BinaryReader, BinaryWriter } from "../../binary";
/**
 * MsgUpdateParams is the Msg/UpdateParams request type.
 *
 * Since: cosmos-sdk 0.47
 */
export interface MsgUpdateParams {
    /** authority is the address of the governance account. */
    authority: string;
    /**
     * params defines the parameters to update.
     *
     * NOTE: All parameters must be supplied.
     */
    params: Params;
}
export interface MsgUpdateParamsProtoMsg {
    typeUrl: "/ems.v1.MsgUpdateParams";
    value: Uint8Array;
}
/**
 * MsgUpdateParams is the Msg/UpdateParams request type.
 *
 * Since: cosmos-sdk 0.47
 */
export interface MsgUpdateParamsAmino {
    /** authority is the address of the governance account. */
    authority?: string;
    /**
     * params defines the parameters to update.
     *
     * NOTE: All parameters must be supplied.
     */
    params?: ParamsAmino;
}
export interface MsgUpdateParamsAminoMsg {
    type: "/ems.v1.MsgUpdateParams";
    value: MsgUpdateParamsAmino;
}
/**
 * MsgUpdateParams is the Msg/UpdateParams request type.
 *
 * Since: cosmos-sdk 0.47
 */
export interface MsgUpdateParamsSDKType {
    authority: string;
    params: ParamsSDKType;
}
/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 *
 * Since: cosmos-sdk 0.47
 */
export interface MsgUpdateParamsResponse {
}
export interface MsgUpdateParamsResponseProtoMsg {
    typeUrl: "/ems.v1.MsgUpdateParamsResponse";
    value: Uint8Array;
}
/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 *
 * Since: cosmos-sdk 0.47
 */
export interface MsgUpdateParamsResponseAmino {
}
export interface MsgUpdateParamsResponseAminoMsg {
    type: "/ems.v1.MsgUpdateParamsResponse";
    value: MsgUpdateParamsResponseAmino;
}
/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 *
 * Since: cosmos-sdk 0.47
 */
export interface MsgUpdateParamsResponseSDKType {
}
export interface MsgCreateEventParams {
    organizer: string;
    name: string;
    id: string;
    nftPrice: number;
    tokenPrice: number;
    tokenSupply: bigint;
    maxOrganizers: number;
}
export interface MsgCreateEventParamsProtoMsg {
    typeUrl: "/ems.v1.MsgCreateEventParams";
    value: Uint8Array;
}
export interface MsgCreateEventParamsAmino {
    organizer?: string;
    name?: string;
    id?: string;
    nft_price?: number;
    token_price?: number;
    token_supply?: string;
    max_organizers?: number;
}
export interface MsgCreateEventParamsAminoMsg {
    type: "/ems.v1.MsgCreateEventParams";
    value: MsgCreateEventParamsAmino;
}
export interface MsgCreateEventParamsSDKType {
    organizer: string;
    name: string;
    id: string;
    nft_price: number;
    token_price: number;
    token_supply: bigint;
    max_organizers: number;
}
export interface MsgCreateEventResponse {
}
export interface MsgCreateEventResponseProtoMsg {
    typeUrl: "/ems.v1.MsgCreateEventResponse";
    value: Uint8Array;
}
export interface MsgCreateEventResponseAmino {
}
export interface MsgCreateEventResponseAminoMsg {
    type: "/ems.v1.MsgCreateEventResponse";
    value: MsgCreateEventResponseAmino;
}
export interface MsgCreateEventResponseSDKType {
}
export interface MsgIssueEventNFTParams {
    receiver: string;
    id: string;
    nft: boolean;
}
export interface MsgIssueEventNFTParamsProtoMsg {
    typeUrl: "/ems.v1.MsgIssueEventNFTParams";
    value: Uint8Array;
}
export interface MsgIssueEventNFTParamsAmino {
    receiver?: string;
    id?: string;
    nft?: boolean;
}
export interface MsgIssueEventNFTParamsAminoMsg {
    type: "/ems.v1.MsgIssueEventNFTParams";
    value: MsgIssueEventNFTParamsAmino;
}
export interface MsgIssueEventNFTParamsSDKType {
    receiver: string;
    id: string;
    nft: boolean;
}
export interface MsgIssueEventNFTResponse {
}
export interface MsgIssueEventNFTResponseProtoMsg {
    typeUrl: "/ems.v1.MsgIssueEventNFTResponse";
    value: Uint8Array;
}
export interface MsgIssueEventNFTResponseAmino {
}
export interface MsgIssueEventNFTResponseAminoMsg {
    type: "/ems.v1.MsgIssueEventNFTResponse";
    value: MsgIssueEventNFTResponseAmino;
}
export interface MsgIssueEventNFTResponseSDKType {
}
export interface MsgAddEventOrganizerParams {
    organizer: string;
    member: string;
    id: string;
}
export interface MsgAddEventOrganizerParamsProtoMsg {
    typeUrl: "/ems.v1.MsgAddEventOrganizerParams";
    value: Uint8Array;
}
export interface MsgAddEventOrganizerParamsAmino {
    organizer?: string;
    member?: string;
    id?: string;
}
export interface MsgAddEventOrganizerParamsAminoMsg {
    type: "/ems.v1.MsgAddEventOrganizerParams";
    value: MsgAddEventOrganizerParamsAmino;
}
export interface MsgAddEventOrganizerParamsSDKType {
    organizer: string;
    member: string;
    id: string;
}
export interface MsgAddEventOrganizerResponse {
}
export interface MsgAddEventOrganizerResponseProtoMsg {
    typeUrl: "/ems.v1.MsgAddEventOrganizerResponse";
    value: Uint8Array;
}
export interface MsgAddEventOrganizerResponseAmino {
}
export interface MsgAddEventOrganizerResponseAminoMsg {
    type: "/ems.v1.MsgAddEventOrganizerResponse";
    value: MsgAddEventOrganizerResponseAmino;
}
export interface MsgAddEventOrganizerResponseSDKType {
}
export interface MsgUpdateEventStatusParams {
    organizer: string;
    id: string;
    active: boolean;
}
export interface MsgUpdateEventStatusParamsProtoMsg {
    typeUrl: "/ems.v1.MsgUpdateEventStatusParams";
    value: Uint8Array;
}
export interface MsgUpdateEventStatusParamsAmino {
    organizer?: string;
    id?: string;
    active?: boolean;
}
export interface MsgUpdateEventStatusParamsAminoMsg {
    type: "/ems.v1.MsgUpdateEventStatusParams";
    value: MsgUpdateEventStatusParamsAmino;
}
export interface MsgUpdateEventStatusParamsSDKType {
    organizer: string;
    id: string;
    active: boolean;
}
export interface MsgUpdateEventStatusResponse {
}
export interface MsgUpdateEventStatusResponseProtoMsg {
    typeUrl: "/ems.v1.MsgUpdateEventStatusResponse";
    value: Uint8Array;
}
export interface MsgUpdateEventStatusResponseAmino {
}
export interface MsgUpdateEventStatusResponseAminoMsg {
    type: "/ems.v1.MsgUpdateEventStatusResponse";
    value: MsgUpdateEventStatusResponseAmino;
}
export interface MsgUpdateEventStatusResponseSDKType {
}
export declare const MsgUpdateParams: {
    typeUrl: string;
    encode(message: MsgUpdateParams, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParams;
    fromPartial(object: Partial<MsgUpdateParams>): MsgUpdateParams;
    fromAmino(object: MsgUpdateParamsAmino): MsgUpdateParams;
    toAmino(message: MsgUpdateParams): MsgUpdateParamsAmino;
    fromAminoMsg(object: MsgUpdateParamsAminoMsg): MsgUpdateParams;
    fromProtoMsg(message: MsgUpdateParamsProtoMsg): MsgUpdateParams;
    toProto(message: MsgUpdateParams): Uint8Array;
    toProtoMsg(message: MsgUpdateParams): MsgUpdateParamsProtoMsg;
};
export declare const MsgUpdateParamsResponse: {
    typeUrl: string;
    encode(_: MsgUpdateParamsResponse, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParamsResponse;
    fromPartial(_: Partial<MsgUpdateParamsResponse>): MsgUpdateParamsResponse;
    fromAmino(_: MsgUpdateParamsResponseAmino): MsgUpdateParamsResponse;
    toAmino(_: MsgUpdateParamsResponse): MsgUpdateParamsResponseAmino;
    fromAminoMsg(object: MsgUpdateParamsResponseAminoMsg): MsgUpdateParamsResponse;
    fromProtoMsg(message: MsgUpdateParamsResponseProtoMsg): MsgUpdateParamsResponse;
    toProto(message: MsgUpdateParamsResponse): Uint8Array;
    toProtoMsg(message: MsgUpdateParamsResponse): MsgUpdateParamsResponseProtoMsg;
};
export declare const MsgCreateEventParams: {
    typeUrl: string;
    encode(message: MsgCreateEventParams, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): MsgCreateEventParams;
    fromPartial(object: Partial<MsgCreateEventParams>): MsgCreateEventParams;
    fromAmino(object: MsgCreateEventParamsAmino): MsgCreateEventParams;
    toAmino(message: MsgCreateEventParams): MsgCreateEventParamsAmino;
    fromAminoMsg(object: MsgCreateEventParamsAminoMsg): MsgCreateEventParams;
    fromProtoMsg(message: MsgCreateEventParamsProtoMsg): MsgCreateEventParams;
    toProto(message: MsgCreateEventParams): Uint8Array;
    toProtoMsg(message: MsgCreateEventParams): MsgCreateEventParamsProtoMsg;
};
export declare const MsgCreateEventResponse: {
    typeUrl: string;
    encode(_: MsgCreateEventResponse, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): MsgCreateEventResponse;
    fromPartial(_: Partial<MsgCreateEventResponse>): MsgCreateEventResponse;
    fromAmino(_: MsgCreateEventResponseAmino): MsgCreateEventResponse;
    toAmino(_: MsgCreateEventResponse): MsgCreateEventResponseAmino;
    fromAminoMsg(object: MsgCreateEventResponseAminoMsg): MsgCreateEventResponse;
    fromProtoMsg(message: MsgCreateEventResponseProtoMsg): MsgCreateEventResponse;
    toProto(message: MsgCreateEventResponse): Uint8Array;
    toProtoMsg(message: MsgCreateEventResponse): MsgCreateEventResponseProtoMsg;
};
export declare const MsgIssueEventNFTParams: {
    typeUrl: string;
    encode(message: MsgIssueEventNFTParams, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): MsgIssueEventNFTParams;
    fromPartial(object: Partial<MsgIssueEventNFTParams>): MsgIssueEventNFTParams;
    fromAmino(object: MsgIssueEventNFTParamsAmino): MsgIssueEventNFTParams;
    toAmino(message: MsgIssueEventNFTParams): MsgIssueEventNFTParamsAmino;
    fromAminoMsg(object: MsgIssueEventNFTParamsAminoMsg): MsgIssueEventNFTParams;
    fromProtoMsg(message: MsgIssueEventNFTParamsProtoMsg): MsgIssueEventNFTParams;
    toProto(message: MsgIssueEventNFTParams): Uint8Array;
    toProtoMsg(message: MsgIssueEventNFTParams): MsgIssueEventNFTParamsProtoMsg;
};
export declare const MsgIssueEventNFTResponse: {
    typeUrl: string;
    encode(_: MsgIssueEventNFTResponse, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): MsgIssueEventNFTResponse;
    fromPartial(_: Partial<MsgIssueEventNFTResponse>): MsgIssueEventNFTResponse;
    fromAmino(_: MsgIssueEventNFTResponseAmino): MsgIssueEventNFTResponse;
    toAmino(_: MsgIssueEventNFTResponse): MsgIssueEventNFTResponseAmino;
    fromAminoMsg(object: MsgIssueEventNFTResponseAminoMsg): MsgIssueEventNFTResponse;
    fromProtoMsg(message: MsgIssueEventNFTResponseProtoMsg): MsgIssueEventNFTResponse;
    toProto(message: MsgIssueEventNFTResponse): Uint8Array;
    toProtoMsg(message: MsgIssueEventNFTResponse): MsgIssueEventNFTResponseProtoMsg;
};
export declare const MsgAddEventOrganizerParams: {
    typeUrl: string;
    encode(message: MsgAddEventOrganizerParams, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): MsgAddEventOrganizerParams;
    fromPartial(object: Partial<MsgAddEventOrganizerParams>): MsgAddEventOrganizerParams;
    fromAmino(object: MsgAddEventOrganizerParamsAmino): MsgAddEventOrganizerParams;
    toAmino(message: MsgAddEventOrganizerParams): MsgAddEventOrganizerParamsAmino;
    fromAminoMsg(object: MsgAddEventOrganizerParamsAminoMsg): MsgAddEventOrganizerParams;
    fromProtoMsg(message: MsgAddEventOrganizerParamsProtoMsg): MsgAddEventOrganizerParams;
    toProto(message: MsgAddEventOrganizerParams): Uint8Array;
    toProtoMsg(message: MsgAddEventOrganizerParams): MsgAddEventOrganizerParamsProtoMsg;
};
export declare const MsgAddEventOrganizerResponse: {
    typeUrl: string;
    encode(_: MsgAddEventOrganizerResponse, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): MsgAddEventOrganizerResponse;
    fromPartial(_: Partial<MsgAddEventOrganizerResponse>): MsgAddEventOrganizerResponse;
    fromAmino(_: MsgAddEventOrganizerResponseAmino): MsgAddEventOrganizerResponse;
    toAmino(_: MsgAddEventOrganizerResponse): MsgAddEventOrganizerResponseAmino;
    fromAminoMsg(object: MsgAddEventOrganizerResponseAminoMsg): MsgAddEventOrganizerResponse;
    fromProtoMsg(message: MsgAddEventOrganizerResponseProtoMsg): MsgAddEventOrganizerResponse;
    toProto(message: MsgAddEventOrganizerResponse): Uint8Array;
    toProtoMsg(message: MsgAddEventOrganizerResponse): MsgAddEventOrganizerResponseProtoMsg;
};
export declare const MsgUpdateEventStatusParams: {
    typeUrl: string;
    encode(message: MsgUpdateEventStatusParams, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateEventStatusParams;
    fromPartial(object: Partial<MsgUpdateEventStatusParams>): MsgUpdateEventStatusParams;
    fromAmino(object: MsgUpdateEventStatusParamsAmino): MsgUpdateEventStatusParams;
    toAmino(message: MsgUpdateEventStatusParams): MsgUpdateEventStatusParamsAmino;
    fromAminoMsg(object: MsgUpdateEventStatusParamsAminoMsg): MsgUpdateEventStatusParams;
    fromProtoMsg(message: MsgUpdateEventStatusParamsProtoMsg): MsgUpdateEventStatusParams;
    toProto(message: MsgUpdateEventStatusParams): Uint8Array;
    toProtoMsg(message: MsgUpdateEventStatusParams): MsgUpdateEventStatusParamsProtoMsg;
};
export declare const MsgUpdateEventStatusResponse: {
    typeUrl: string;
    encode(_: MsgUpdateEventStatusResponse, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateEventStatusResponse;
    fromPartial(_: Partial<MsgUpdateEventStatusResponse>): MsgUpdateEventStatusResponse;
    fromAmino(_: MsgUpdateEventStatusResponseAmino): MsgUpdateEventStatusResponse;
    toAmino(_: MsgUpdateEventStatusResponse): MsgUpdateEventStatusResponseAmino;
    fromAminoMsg(object: MsgUpdateEventStatusResponseAminoMsg): MsgUpdateEventStatusResponse;
    fromProtoMsg(message: MsgUpdateEventStatusResponseProtoMsg): MsgUpdateEventStatusResponse;
    toProto(message: MsgUpdateEventStatusResponse): Uint8Array;
    toProtoMsg(message: MsgUpdateEventStatusResponse): MsgUpdateEventStatusResponseProtoMsg;
};
