"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExampleData = void 0;
const binary_1 = require("../../binary");
const helpers_1 = require("../../helpers");
function createBaseExampleData() {
    return {
        account: new Uint8Array(),
        amount: BigInt(0)
    };
}
exports.ExampleData = {
    typeUrl: "/ems.v1.ExampleData",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.account.length !== 0) {
            writer.uint32(10).bytes(message.account);
        }
        if (message.amount !== BigInt(0)) {
            writer.uint32(16).uint64(message.amount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExampleData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.account = reader.bytes();
                    break;
                case 2:
                    message.amount = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseExampleData();
        message.account = object.account ?? new Uint8Array();
        message.amount = object.amount !== undefined && object.amount !== null ? BigInt(object.amount.toString()) : BigInt(0);
        return message;
    },
    fromAmino(object) {
        const message = createBaseExampleData();
        if (object.account !== undefined && object.account !== null) {
            message.account = (0, helpers_1.bytesFromBase64)(object.account);
        }
        if (object.amount !== undefined && object.amount !== null) {
            message.amount = BigInt(object.amount);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.account = message.account ? (0, helpers_1.base64FromBytes)(message.account) : undefined;
        obj.amount = message.amount !== BigInt(0) ? (message.amount?.toString)() : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.ExampleData.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.ExampleData.decode(message.value);
    },
    toProto(message) {
        return exports.ExampleData.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/ems.v1.ExampleData",
            value: exports.ExampleData.encode(message).finish()
        };
    }
};
//# sourceMappingURL=state.js.map