import { MsgUpdateParams, MsgCreateEventParams, MsgIssueEventNFTParams, MsgAddEventOrganizerParams, MsgUpdateEventStatusParams } from "./tx";
export const registry = [["/ems.v1.MsgUpdateParams", MsgUpdateParams], ["/ems.v1.MsgCreateEventParams", MsgCreateEventParams], ["/ems.v1.MsgIssueEventNFTParams", MsgIssueEventNFTParams], ["/ems.v1.MsgAddEventOrganizerParams", MsgAddEventOrganizerParams], ["/ems.v1.MsgUpdateEventStatusParams", MsgUpdateEventStatusParams]];
export const load = (protoRegistry) => {
    registry.forEach(([typeUrl, mod]) => {
        protoRegistry.register(typeUrl, mod);
    });
};
export const MessageComposer = {
    encoded: {
        updateParams(value) {
            return {
                typeUrl: "/ems.v1.MsgUpdateParams",
                value: MsgUpdateParams.encode(value).finish()
            };
        },
        msgCreateEvent(value) {
            return {
                typeUrl: "/ems.v1.MsgCreateEventParams",
                value: MsgCreateEventParams.encode(value).finish()
            };
        },
        msgIssueEventNFT(value) {
            return {
                typeUrl: "/ems.v1.MsgIssueEventNFTParams",
                value: MsgIssueEventNFTParams.encode(value).finish()
            };
        },
        msgAddEventOrganizer(value) {
            return {
                typeUrl: "/ems.v1.MsgAddEventOrganizerParams",
                value: MsgAddEventOrganizerParams.encode(value).finish()
            };
        },
        msgUpdateEventStatus(value) {
            return {
                typeUrl: "/ems.v1.MsgUpdateEventStatusParams",
                value: MsgUpdateEventStatusParams.encode(value).finish()
            };
        }
    },
    withTypeUrl: {
        updateParams(value) {
            return {
                typeUrl: "/ems.v1.MsgUpdateParams",
                value
            };
        },
        msgCreateEvent(value) {
            return {
                typeUrl: "/ems.v1.MsgCreateEventParams",
                value
            };
        },
        msgIssueEventNFT(value) {
            return {
                typeUrl: "/ems.v1.MsgIssueEventNFTParams",
                value
            };
        },
        msgAddEventOrganizer(value) {
            return {
                typeUrl: "/ems.v1.MsgAddEventOrganizerParams",
                value
            };
        },
        msgUpdateEventStatus(value) {
            return {
                typeUrl: "/ems.v1.MsgUpdateEventStatusParams",
                value
            };
        }
    },
    fromPartial: {
        updateParams(value) {
            return {
                typeUrl: "/ems.v1.MsgUpdateParams",
                value: MsgUpdateParams.fromPartial(value)
            };
        },
        msgCreateEvent(value) {
            return {
                typeUrl: "/ems.v1.MsgCreateEventParams",
                value: MsgCreateEventParams.fromPartial(value)
            };
        },
        msgIssueEventNFT(value) {
            return {
                typeUrl: "/ems.v1.MsgIssueEventNFTParams",
                value: MsgIssueEventNFTParams.fromPartial(value)
            };
        },
        msgAddEventOrganizer(value) {
            return {
                typeUrl: "/ems.v1.MsgAddEventOrganizerParams",
                value: MsgAddEventOrganizerParams.fromPartial(value)
            };
        },
        msgUpdateEventStatus(value) {
            return {
                typeUrl: "/ems.v1.MsgUpdateEventStatusParams",
                value: MsgUpdateEventStatusParams.fromPartial(value)
            };
        }
    }
};
//# sourceMappingURL=tx.registry.js.map