import { Rpc } from "../../helpers";
import { MsgUpdateParams, MsgUpdateParamsResponse, MsgCreateEventParams, MsgCreateEventResponse, MsgIssueEventNFTParams, MsgIssueEventNFTResponse, MsgAddEventOrganizerParams, MsgAddEventOrganizerResponse, MsgUpdateEventStatusParams, MsgUpdateEventStatusResponse } from "./tx";
/** Msg defines the Msg service. */
export interface Msg {
    /**
     * UpdateParams defines a governance operation for updating the parameters.
     *
     * Since: cosmos-sdk 0.47
     */
    updateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse>;
    msgCreateEvent(request: MsgCreateEventParams): Promise<MsgCreateEventResponse>;
    msgIssueEventNFT(request: MsgIssueEventNFTParams): Promise<MsgIssueEventNFTResponse>;
    msgAddEventOrganizer(request: MsgAddEventOrganizerParams): Promise<MsgAddEventOrganizerResponse>;
    msgUpdateEventStatus(request: MsgUpdateEventStatusParams): Promise<MsgUpdateEventStatusResponse>;
}
export declare class MsgClientImpl implements Msg {
    private readonly rpc;
    constructor(rpc: Rpc);
    updateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse>;
    msgCreateEvent(request: MsgCreateEventParams): Promise<MsgCreateEventResponse>;
    msgIssueEventNFT(request: MsgIssueEventNFTParams): Promise<MsgIssueEventNFTResponse>;
    msgAddEventOrganizer(request: MsgAddEventOrganizerParams): Promise<MsgAddEventOrganizerResponse>;
    msgUpdateEventStatus(request: MsgUpdateEventStatusParams): Promise<MsgUpdateEventStatusResponse>;
}
