import { BinaryReader } from "../../binary";
import { MsgUpdateParams, MsgUpdateParamsResponse, MsgCreateEventParams, MsgCreateEventResponse, MsgIssueEventNFTParams, MsgIssueEventNFTResponse, MsgAddEventOrganizerParams, MsgAddEventOrganizerResponse, MsgUpdateEventStatusParams, MsgUpdateEventStatusResponse } from "./tx";
export class MsgClientImpl {
    rpc;
    constructor(rpc) {
        this.rpc = rpc;
        this.updateParams = this.updateParams.bind(this);
        this.msgCreateEvent = this.msgCreateEvent.bind(this);
        this.msgIssueEventNFT = this.msgIssueEventNFT.bind(this);
        this.msgAddEventOrganizer = this.msgAddEventOrganizer.bind(this);
        this.msgUpdateEventStatus = this.msgUpdateEventStatus.bind(this);
    }
    updateParams(request) {
        const data = MsgUpdateParams.encode(request).finish();
        const promise = this.rpc.request("ems.v1.Msg", "UpdateParams", data);
        return promise.then(data => MsgUpdateParamsResponse.decode(new BinaryReader(data)));
    }
    msgCreateEvent(request) {
        const data = MsgCreateEventParams.encode(request).finish();
        const promise = this.rpc.request("ems.v1.Msg", "MsgCreateEvent", data);
        return promise.then(data => MsgCreateEventResponse.decode(new BinaryReader(data)));
    }
    msgIssueEventNFT(request) {
        const data = MsgIssueEventNFTParams.encode(request).finish();
        const promise = this.rpc.request("ems.v1.Msg", "MsgIssueEventNFT", data);
        return promise.then(data => MsgIssueEventNFTResponse.decode(new BinaryReader(data)));
    }
    msgAddEventOrganizer(request) {
        const data = MsgAddEventOrganizerParams.encode(request).finish();
        const promise = this.rpc.request("ems.v1.Msg", "MsgAddEventOrganizer", data);
        return promise.then(data => MsgAddEventOrganizerResponse.decode(new BinaryReader(data)));
    }
    msgUpdateEventStatus(request) {
        const data = MsgUpdateEventStatusParams.encode(request).finish();
        const promise = this.rpc.request("ems.v1.Msg", "MsgUpdateEventStatus", data);
        return promise.then(data => MsgUpdateEventStatusResponse.decode(new BinaryReader(data)));
    }
}
//# sourceMappingURL=tx.rpc.msg.js.map