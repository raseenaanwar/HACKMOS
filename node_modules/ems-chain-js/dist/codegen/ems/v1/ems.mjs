import { BinaryReader, BinaryWriter } from "../../binary";
function createBaseEvent() {
    return {
        name: "",
        organizers: [],
        active: false,
        nftPrice: 0,
        tokenPrice: 0,
        maxOrganizers: 0
    };
}
export const Event = {
    typeUrl: "/ems.v1.Event",
    encode(message, writer = BinaryWriter.create()) {
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        for (const v of message.organizers) {
            writer.uint32(26).string(v);
        }
        if (message.active === true) {
            writer.uint32(32).bool(message.active);
        }
        if (message.nftPrice !== 0) {
            writer.uint32(40).int32(message.nftPrice);
        }
        if (message.tokenPrice !== 0) {
            writer.uint32(48).int32(message.tokenPrice);
        }
        if (message.maxOrganizers !== 0) {
            writer.uint32(56).int32(message.maxOrganizers);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2:
                    message.name = reader.string();
                    break;
                case 3:
                    message.organizers.push(reader.string());
                    break;
                case 4:
                    message.active = reader.bool();
                    break;
                case 5:
                    message.nftPrice = reader.int32();
                    break;
                case 6:
                    message.tokenPrice = reader.int32();
                    break;
                case 7:
                    message.maxOrganizers = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseEvent();
        message.name = object.name ?? "";
        message.organizers = object.organizers?.map(e => e) || [];
        message.active = object.active ?? false;
        message.nftPrice = object.nftPrice ?? 0;
        message.tokenPrice = object.tokenPrice ?? 0;
        message.maxOrganizers = object.maxOrganizers ?? 0;
        return message;
    },
    fromAmino(object) {
        const message = createBaseEvent();
        if (object.name !== undefined && object.name !== null) {
            message.name = object.name;
        }
        message.organizers = object.organizers?.map(e => e) || [];
        if (object.active !== undefined && object.active !== null) {
            message.active = object.active;
        }
        if (object.nft_price !== undefined && object.nft_price !== null) {
            message.nftPrice = object.nft_price;
        }
        if (object.token_price !== undefined && object.token_price !== null) {
            message.tokenPrice = object.token_price;
        }
        if (object.max_organizers !== undefined && object.max_organizers !== null) {
            message.maxOrganizers = object.max_organizers;
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.name = message.name === "" ? undefined : message.name;
        if (message.organizers) {
            obj.organizers = message.organizers.map(e => e);
        }
        else {
            obj.organizers = message.organizers;
        }
        obj.active = message.active === false ? undefined : message.active;
        obj.nft_price = message.nftPrice === 0 ? undefined : message.nftPrice;
        obj.token_price = message.tokenPrice === 0 ? undefined : message.tokenPrice;
        obj.max_organizers = message.maxOrganizers === 0 ? undefined : message.maxOrganizers;
        return obj;
    },
    fromAminoMsg(object) {
        return Event.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return Event.decode(message.value);
    },
    toProto(message) {
        return Event.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/ems.v1.Event",
            value: Event.encode(message).finish()
        };
    }
};
//# sourceMappingURL=ems.js.map