import { BinaryReader, BinaryWriter } from "../../binary";
export interface Event {
    name: string;
    organizers: string[];
    active: boolean;
    nftPrice: number;
    tokenPrice: number;
    maxOrganizers: number;
}
export interface EventProtoMsg {
    typeUrl: "/ems.v1.Event";
    value: Uint8Array;
}
export interface EventAmino {
    name?: string;
    organizers?: string[];
    active?: boolean;
    nft_price?: number;
    token_price?: number;
    max_organizers?: number;
}
export interface EventAminoMsg {
    type: "/ems.v1.Event";
    value: EventAmino;
}
export interface EventSDKType {
    name: string;
    organizers: string[];
    active: boolean;
    nft_price: number;
    token_price: number;
    max_organizers: number;
}
export declare const Event: {
    typeUrl: string;
    encode(message: Event, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): Event;
    fromPartial(object: Partial<Event>): Event;
    fromAmino(object: EventAmino): Event;
    toAmino(message: Event): EventAmino;
    fromAminoMsg(object: EventAminoMsg): Event;
    fromProtoMsg(message: EventProtoMsg): Event;
    toProto(message: Event): Uint8Array;
    toProtoMsg(message: Event): EventProtoMsg;
};
